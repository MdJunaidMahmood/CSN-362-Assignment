#include <iostream>
#include <vector>
#include <string>
using namespace std;

bool check(string input){
  int n = input.size();

  for(int i = 0; i < n; i++){
    if(input[i] == 'a' || input[i] == 'b') continue;
    else return false;
  }
  return true;
}

bool belongsToCFG(string input){
  int n = input.size();

  if(n % 2 == 1) return false;
  else{
    int start = 0;
    int end = n - 1;

    while(start < end){
      if(input[start] == 'a' && input[end] == 'b'){
        start = start + 1;
        end = end - 1;
      }else return false;
    }

    return true;
  }
}

bool isEmpty(string input){
  if(input.size() == 1 && input[0] == '^') return true;
  else return false;
}

void derivation(string input){
  string intermediate;
  intermediate = "S";

  int start = 0;
  int end = input.size() - 1;

  cout << intermediate << " => ";
  while(start < end){
    if(input[start] == 'a' && input[end] == 'b'){
      intermediate = "a" + intermediate + "b";
      cout << intermediate << " => ";

      start = start + 1;
      end = end - 1;
    }else break;
  }

  if(start <= end){
    cout << "Error! No production exist in the Grammar that would furthur lead to the desired string\n";
  }else{
    int length = (int)(input.size()/2);
    intermediate = intermediate.substr(0, length) + "^" + intermediate.substr(length + 1, length);
    cout << intermediate << " => " << input << "\n";
  }
}

void deriveEmpty(){
  cout << "S => ^\n";
}

void printInformation(){
  cout << "The Language accepted by the grammar G is {a^nb^n | n >= 0}. Here a^n refers a to the power of n. The alphabet of the language is {a, b}\n\n";
  cout << "Context Free Grammar for this language is: S -> aSb | ^\nHere ^ refers to the empty string\nHere {a, b} is the set of Terminal Symbols and {S} is the set of Non-Terminal Symbols\nS is the Start Symbol\n";
  cout << "----------------------------------------------------------------------------------\n\n";
}

string preProcessing(string input){
  vector<char> array;
  int n = input.size();

  for(int i = 0; i < n; i++) array.push_back(input[i]);

  string rawInput;
  for(int i = 0; i < n; i++){
    if(array[i] == '^') continue;
    else rawInput.push_back(array[i]);
  }

  if(rawInput.size() == 0) rawInput.push_back('^');
  return rawInput;
}

int main(){
  printInformation();

  string input;
  cin >> input;
  input = preProcessing(input);

  while(input != "-1"){
    bool flag = check(input);

    if(!flag){
      if(isEmpty(input)){
        cout << input << " (Empty String) belongs to the language generated by the grammar G\n";
        deriveEmpty();
      }else{
        cout << input << " is invalid as it contains symbol other than alphabet {a, b}\n";
      }
    }else{
      bool belongs = belongsToCFG(input);
      if(belongs){
        cout << input << " belongs to the language generated by the grammar G\n";
      }else{
        cout << input << " does not belongs to language generated by the grammar G\n";
      }

      derivation(input);
    }
    
    cout << "----------------------------------------------------------------------------------\n\n";

    cin >> input;
    input = preProcessing(input);
  }
}
